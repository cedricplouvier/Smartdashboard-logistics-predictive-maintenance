//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.07.01 at 02:25:39 AM CEST 
//


package com.example.demo.SmartDashboard.TransicsClient.gen;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for enumTextMessageStatus.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="enumTextMessageStatus"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="NOT_SEND"/&gt;
 *     &lt;enumeration value="SENDING"/&gt;
 *     &lt;enumeration value="SENDING_OK"/&gt;
 *     &lt;enumeration value="ARRIVED"/&gt;
 *     &lt;enumeration value="IMPOSSIBLE_TO_SEND"/&gt;
 *     &lt;enumeration value="PROCESSED_SUCCESS"/&gt;
 *     &lt;enumeration value="PROCESSED_FAILED"/&gt;
 *     &lt;enumeration value="READ_BY_DRIVER"/&gt;
 *     &lt;enumeration value="RESERVED1_TRANSICS"/&gt;
 *     &lt;enumeration value="BLOCKED"/&gt;
 *     &lt;enumeration value="SENDING_AFTER_BLOCKED"/&gt;
 *     &lt;enumeration value="SENDING_SUCCESS_AFTER_BLOCKED"/&gt;
 *     &lt;enumeration value="ARRIVED_AFTER_BLOCKED"/&gt;
 *     &lt;enumeration value="READ_BY_DRIVER_AFTER_BLOCKED"/&gt;
 *     &lt;enumeration value="RESERVED2_TRANSICS"/&gt;
 *     &lt;enumeration value="RESERVED3_TRANSICS"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "enumTextMessageStatus")
@XmlEnum
public enum EnumTextMessageStatus {

    NOT_SEND("NOT_SEND"),
    SENDING("SENDING"),
    SENDING_OK("SENDING_OK"),
    ARRIVED("ARRIVED"),
    IMPOSSIBLE_TO_SEND("IMPOSSIBLE_TO_SEND"),
    PROCESSED_SUCCESS("PROCESSED_SUCCESS"),
    PROCESSED_FAILED("PROCESSED_FAILED"),
    READ_BY_DRIVER("READ_BY_DRIVER"),
    @XmlEnumValue("RESERVED1_TRANSICS")
    RESERVED_1_TRANSICS("RESERVED1_TRANSICS"),
    BLOCKED("BLOCKED"),
    SENDING_AFTER_BLOCKED("SENDING_AFTER_BLOCKED"),
    SENDING_SUCCESS_AFTER_BLOCKED("SENDING_SUCCESS_AFTER_BLOCKED"),
    ARRIVED_AFTER_BLOCKED("ARRIVED_AFTER_BLOCKED"),
    READ_BY_DRIVER_AFTER_BLOCKED("READ_BY_DRIVER_AFTER_BLOCKED"),
    @XmlEnumValue("RESERVED2_TRANSICS")
    RESERVED_2_TRANSICS("RESERVED2_TRANSICS"),
    @XmlEnumValue("RESERVED3_TRANSICS")
    RESERVED_3_TRANSICS("RESERVED3_TRANSICS");
    private final String value;

    EnumTextMessageStatus(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static EnumTextMessageStatus fromValue(String v) {
        for (EnumTextMessageStatus c: EnumTextMessageStatus.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
